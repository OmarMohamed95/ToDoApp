# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration

imports:
    - { resource: config.yaml }

parameters:
    uploads_base_url: '%env(SITE_BASE_URL)%uploads/'
           
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $uploads_base_url: '%env(SITE_BASE_URL)%uploads/'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    App\Service\FileUploader:
        arguments:
            $targetDirectory: '%kernel.project_dir%/public/uploads/'

    App\Service\Serializer\SerializerService:

    App\Service\UserService:

    App\Service\MailerService:
                    
    App\Service\ValidationService:

    App\Service\RedisCache: ~
    App\Util\CacheInterface: '@App\Service\RedisCache'
    
    acme_api.event.authentication_success_listener:
        class: App\Listeners\AuthenticationSuccessListener
        arguments: ['%lexik_jwt_authentication.token_ttl%']
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_success, method: onAuthenticationSuccess, priority: -2 }

    acme_api.event.authentication_failure_listener:
        class: App\Listeners\AuthenticationFailureListener
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_authentication_failure, method: onAuthenticationFailureResponse }


    App\Listeners\RefreshTokenListener:
        arguments: ['%gesdinet_jwt_refresh_token.ttl%']

    App\Listeners\JWTNotFoundResponseListener:
        tags:
            - { name: kernel.event_listener, event: lexik_jwt_authentication.on_jwt_not_found, method: onJWTNotFound, priority: 0 }    
    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    App\Controller\GoogleLoginController:
        arguments:
            $clientID: '%env(GOOGLE_CLIENT_ID)%'
            $clientSecret: '%env(GOOGLE_CLIENT_SECRET)%'
            $redirectUri: '%env(GOOGLE_REDIRECT_URI)%'     

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
